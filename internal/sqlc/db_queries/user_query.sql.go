// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_query.sql

package db_queries

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(full_name, birthday, gender, email, password, avatar_file_name, online)
VALUES
($1, $2, $3::gender, $4, $5, $6, true)
RETURNING id, full_name, birthday, gender, email, password, avatar_file_name, online, email_verified, last_seen, created_at, updated_at
`

type CreateUserParams struct {
	FullName       string
	Birthday       time.Time
	Gender         Gender
	Email          string
	Password       []byte
	AvatarFileName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FullName,
		arg.Birthday,
		arg.Gender,
		arg.Email,
		arg.Password,
		arg.AvatarFileName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Birthday,
		&i.Gender,
		&i.Email,
		&i.Password,
		&i.AvatarFileName,
		&i.Online,
		&i.EmailVerified,
		&i.LastSeen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, birthday, gender, email, password, avatar_file_name, online, email_verified, last_seen, created_at, updated_at
FROM users
WHERE users.email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Birthday,
		&i.Gender,
		&i.Email,
		&i.Password,
		&i.AvatarFileName,
		&i.Online,
		&i.EmailVerified,
		&i.LastSeen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, full_name, birthday, gender, email, password, avatar_file_name, online, email_verified, last_seen, created_at, updated_at
FROM users
WHERE users.id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Birthday,
		&i.Gender,
		&i.Email,
		&i.Password,
		&i.AvatarFileName,
		&i.Online,
		&i.EmailVerified,
		&i.LastSeen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeUser = `-- name: RemoveUser :exec
DELETE FROM users
WHERE users.id = $1
`

func (q *Queries) RemoveUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    full_name = coalesce($1, full_name),
    birthday = coalesce($2, birthday),
    gender = coalesce($3, gender),
    email = coalesce($4, email),
    password = coalesce($5, password),
    avatar_file_name = coalesce($6, avatar_file_name),
    email_verified = case
        when $4 is null then true
        else false
    end
WHERE users.id = $7
RETURNING id, full_name, birthday, gender, email, password, avatar_file_name, online, email_verified, last_seen, created_at, updated_at
`

type UpdateUserParams struct {
	FullName       pgtype.Text
	Birthday       *time.Time
	Gender         NullGender
	Email          pgtype.Text
	Password       []byte
	AvatarFileName pgtype.Text
	ID             uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FullName,
		arg.Birthday,
		arg.Gender,
		arg.Email,
		arg.Password,
		arg.AvatarFileName,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Birthday,
		&i.Gender,
		&i.Email,
		&i.Password,
		&i.AvatarFileName,
		&i.Online,
		&i.EmailVerified,
		&i.LastSeen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
