// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db_queries

import (
	"database/sql/driver"
	"fmt"
	"time"

	"chat_app_backend/internal/extensions"
)

type ChatType string

const (
	ChatTypePRIVATECHAT ChatType = "PRIVATE_CHAT"
	ChatTypeGROUPCHAT   ChatType = "GROUP_CHAT"
)

func (e *ChatType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatType(s)
	case string:
		*e = ChatType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatType: %T", src)
	}
	return nil
}

type NullChatType struct {
	ChatType ChatType
	Valid    bool // Valid is true if ChatType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatType) Scan(value interface{}) error {
	if value == nil {
		ns.ChatType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatType), nil
}

type Gender string

const (
	GenderMALE   Gender = "MALE"
	GenderFEMALE Gender = "FEMALE"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type RoleType string

const (
	RoleTypeUSER  RoleType = "USER"
	RoleTypeADMIN RoleType = "ADMIN"
)

func (e *RoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleType(s)
	case string:
		*e = RoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleType: %T", src)
	}
	return nil
}

type NullRoleType struct {
	RoleType RoleType
	Valid    bool // Valid is true if RoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.RoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleType), nil
}

type Attachment struct {
	ID        extensions.UUID
	MessageID extensions.UUID
	Filename  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Chat struct {
	ID        extensions.UUID
	Title     *string
	CType     ChatType
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Interest struct {
	ID           extensions.UUID
	Title        string
	IconFileName string
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Description  string
}

type Message struct {
	ID                 extensions.UUID
	ChatID             extensions.UUID
	SenderID           extensions.UUID
	RawText            *string
	Edited             bool
	MessageReferenceID *extensions.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
}

type ReadStatus struct {
	UserID    extensions.UUID
	MessageID extensions.UUID
	ReadAt    time.Time
}

type User struct {
	ID             extensions.UUID
	FullName       string
	Birthday       time.Time
	Gender         Gender
	Email          string
	Password       []byte
	AvatarFileName string
	Online         bool
	EmailVerified  bool
	LastSeen       time.Time
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Role           RoleType
}

type UserChat struct {
	UserID            extensions.UUID
	ChatID            extensions.UUID
	RevealInformation bool
	Blocked           bool
}

type UserInterest struct {
	UserID     extensions.UUID
	InterestID extensions.UUID
}

type VerificationCode struct {
	ID        extensions.UUID
	UserID    extensions.UUID
	Code      int32
	ExpiresAt time.Time
}
